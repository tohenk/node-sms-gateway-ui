<h3 class="ui header x-title"></h3>
<table class="ui selectable celled table">
  <thead>
    <tr>
      <th><%= _('#') %></th>
      <th><%= _('Address') %></th>
      <th><%= _('Message') %></th>
      <th><%= _('Time') %></th>
      <th><%= _('Action') %></th>
    </tr>
  </thead>
</table>
<%_ script.create('JQuery')
  .useDependencies(['SemanticUI/Loader', 'SemanticUI/Dialog', 'SemanticUI/Notification', 'JQuery/Util'])
  .addMiddle(`
$.messageView = function(address) {
    if (!$.messageViewDlg) {
        $.messageViewDlg = {
            init: function() {
                const self = this;
                const msgtitle = '${_('View message')}';
                const msgtmpl =
                    '<form class="ui container form">' +
                        '<div class="content" style="margin-bottom: 1em; padding-right: 1em; max-height: 70vh; overflow-y: auto;">${_('Messages will shown here')}</div>' +
                        '<div class="field">' +
                            '<div class="ui action input">' +
                                '<input type="text" value="" name="message" placeholder="${_('Type a message to sent')}">' +
                                '<button class="ui icon button"><i class="envelope icon"></i></button>' +
                            '</div>' +
                        '</div>' +
                    '</form>';
                self.dlg = $.ntdlg.create('msgviewdlg', msgtitle, msgtmpl, {
                    closable: true,
                    size: 'small',
                });
                self.dlg.find('form').on('submit', function(e) {
                    e.stopPropagation();
                    self.send();
                });
                self.dlg.find('form button').on('click', function(e) {
                    e.preventDefault();
                    self.send();
                });
            },
            notifyResult: function(result) {
                const self = this;
                if (result.success) {
                    this.load();
                    $.notify(result.notice, 'success');
                } else {
                    $.notify(result.error, 'error');
                }
            },
            send: function() {
                const self = this;
                const inp = self.dlg.find('input[name="message"]');
                const msg = inp.val();
                if (!msg.length) {
                    inp.focus();
                } else {
                    $.post('${route('Gw', {name: 'message-send'})}', {number: self.address, message: msg})
                        .done(function(json) {
                            inp.val('');
                            self.notifyResult(json);
                        })
                    ;
                }
            },
            show: function(address) {
                const self = this;
                self.address = address;
                self.dlg.find('input[name="message"]').val('');
                self.dlg.find('.header').html('${_('View message for NUMBER')}'.replace(/NUMBER/, address));
                self.dlg.find('form .content').empty();
                $.ntdlg.show(self.dlg);
                self.load();
            },
            content: function(content) {
                const self = this;
                self.dlg.find('form .content').html(content);
            },
            statusInfo: function(data) {
                if (data.code !== null) {
                    return data.code === 0 ? ['green check', '${_('Message received')}'] : ['red exclamation', '${_('Message not received')}'];
                } else {
                    if (data.processed === 1) {
                        return data.status === 1 ? ['yellow question', '${_('Message sent but status unconfirmed')}'] : ['red times', '${_('Message failed to sent')}'];
                    } else {
                        return ['clock', '${_('Message is waiting for processing')}'];
                    }
                }
            },
            load: function() {
                const self = this;
                $.get('${route('Gw', {name: 'message-get', number: 'NUMBER'})}'.replace(/NUMBER/, self.address))
                    .done(function(json) {
                        const contents = [];
                        for (const time in json) {
                            contents.push('<div class="ui horizontal divider">' + time + '</div>');
                            contents.push('<div class="ui divided feed">');
                            if (Array.isArray(json[time])) {
                                json[time].forEach(v => {
                                    if (v.type === ${term.Storage.ACTIVITY_SMS}) {
                                        const info = self.statusInfo(v);
                                        contents.push($.util.template('<div class="event">' +
                                                '<div class="label"><i class="circular blue envelope icon"></i></div>' +
                                                '<div class="content">' +
                                                    '<div class="summary">%MESSAGE%</div>' +
                                                    '<div class="extra text"><small>${_('Sent via %IMSI%')} <span class="ui mini label">%OPERATOR%</span> <i class="%ICON% icon" title="%INFO%"></i></small></div>' +
                                                '</div>' +
                                            '</div>', {
                                            MESSAGE: v.message,
                                            IMSI: v.imsi,
                                            OPERATOR: v.operator ? v.operator : '${_('n/a')}',
                                            ICON: info[0],
                                            INFO: info[1]
                                        }));
                                    } else {
                                        contents.push($.util.template('<div class="event">' +
                                                '<div class="content">' +
                                                    '<div class="summary">%MESSAGE%</div>' +
                                                    '<div class="extra text"><small>${_('Received via %IMSI%')} <span class="ui mini label">%OPERATOR%</span></small></div>' +
                                                '</div>' +
                                                '<div class="label"><i class="circular green envelope icon"></i></div>' +
                                            '</div>', {
                                            MESSAGE: v.message,
                                            IMSI: v.imsi,
                                            OPERATOR: v.operator ? v.operator : '${_('n/a')}'
                                        }));
                                    }
                                });
                            }
                            contents.push('</div>');
                        }
                        self.content(contents.join('\\n'));
                    })
                ;
            }
        }
        $.messageViewDlg.init();
    }
    $.messageViewDlg.show(address);
}
$.message = $.loader($('div[data-tab="message"] table'), {
    url: '${route('Gw', {name: 'message-page', page: 'PAGE'})}',
    formatRow: function(item) {
        return $('<tr><td>' + item.nr + '</td>' +
            '<td>' + item.address + '</td>' +
            '<td>' + item.data + '</td>' +
            '<td>' + item.time + '</td>' +
            '<td class="ui center aligned"><a href="#" data-address="' + item.address + '">' + this.icon(4) + '</a></td>' +
            '</tr>');
    },
    loaded: function() {
        this.container.find('tbody a').on('click', function(e) {
            e.preventDefault();
            $.messageView($(this).data('address'));
        });
    }
});
`)
  .addLast(`
$.message.load();
`) -%>
