<%_ menus = {
    branding: {
        type: 'brand',
        title: apptitle,
        logo: path('/images/logo.png'),
        url: path('/')
    },
    tasks: {
        title: _('Tasks'),
        class: 'right floated',
        items: {
            about: {
                title: _('About')
            }
        }
    }
} -%>
<%_ if (user.authenticated) {
    Object.assign(menus.tasks.items, {
        divider1: {
            type: 'divider'
        },
        readmsg: {
            title: _('Read messages from storage')
        },
        resendmsg: {
            title: _('Resend incoming messages')
        },
        checkreport: {
            title: _('Check delivery report')
        },
        divider2: {
            type: 'divider'
        },
        logout: {
            title: _('Logout'),
            url: route('Security', {name: 'logout'})
        }
    });
} -%>
<%- menu(menus, {mainmenu: true, indentation: 2}) %>
<%_ script.create('JQuery')
  .useDependencies(['JQuery/Util', 'SemanticUI/Notification', 'SemanticUI/Dialog/Message'])
  .addMiddle(`
$.tasks = {
    about: function() {
        const self = this;
        const f = function() {
            const msg = $.util.template(
                '<p>%TITLE% version %VERSION%<br/>\\n' +
                '(c) %AUTHOR%<br/>\\n' +
                'Licensed under %LICENSE%</p>', {
                    TITLE: self.aboutInfo.title,
                    VERSION: self.aboutInfo.version,
                    AUTHOR: $('<div>').text(self.aboutInfo.author).html(),
                    LICENSE: self.aboutInfo.license
                }
            );
            $.ntdlg.message('task-about', '${_('About')}', msg, $.ntdlg.ICON_INFO);
        }
        if (!self.aboutInfo) {
            $.get('${route('Gw', {name: 'about'})}')
                .done(function(json) {
                    self.aboutInfo = json;
                    f();
                });
        } else {
            f();
        }
    },
    notifyResult: function(result) {
        if (result.success) {
            $.notify('${_('Operation successfully submitted!')}', 'success');
        } else {
            $.notify('${_('Operation failed!')}', 'error');
        }
    },
    createPickMessageTypeDialog: function(id, title, label, handler, icon) {
        const message =
            '<form class="ui container form">\\n' +
            '  <div class="field">\\n' +
            '    <label>' + label + '</label>\\n' +
            '    <select name="type" class="ui dropdown">\\n' +
            '      <option value="0">${_('Unread messages')}</option>\\n' +
            '      <option value="1">${_('Read messages')}</option>\\n' +
            '    </select>\\n' +
            '  </div>\\n' +
            '</form>';
        const dlg = $.ntdlg.dialog(id, title, message, icon ? icon : 'envelope icon', {
            okay: {
                type: 'green approve',
                caption: '<i class="check icon"></i>${_('Ok')}',
                handler: function() {
                    const t = parseInt(dlg.find('select[name="type"]').val());
                    if (typeof handler === 'function') {
                        handler(t);
                    }
                }
            },
            cancel: {
                type: 'red deny',
                caption: '<i class="times icon"></i>${_('Cancel')}'
            }
        });
        dlg.find('select.dropdown').dropdown();
        dlg.find('form').on('submit', function(e) {
            e.preventDefault();
            dlg.find('div.green.button').click();
        });
        return dlg;
    },
    createPickTimeDialog: function(id, title, label, handler, icon) {
        const message =
            '<form class="ui container form">\\n' +
            '  <div class="field">\\n' +
            '    <label>' + label + '</label>\\n' +
            '    <div class="ui calendar">\\n' +
            '      <div class="ui input left icon">\\n' +
            '        <i class="calendar icon"></i>\\n' +
            '        <input name="since" type="text" placeholder="${_('Date/Time')}">\\n' +
            '      </div>\\n' +
            '    </div>\\n' +
            '  </div>\\n' +
            '</form>';
        const dlg = $.ntdlg.dialog(id, title, message, icon ? icon : 'envelope icon', {
            okay: {
                type: 'green approve',
                caption: '<i class="check icon"></i>${_('Ok')}',
                handler: function() {
                    const t = dlg.find('input[name="since"]');
                    try {
                        dt = new Date(t.val());
                    } catch (e) {
                        t.focus();
                        return false;
                    }
                    if (typeof handler === 'function') {
                        handler(dt);
                    }
                }
            },
            cancel: {
                type: 'red deny',
                caption: '<i class="times icon"></i>${_('Cancel')}'
            }
        });
        dlg.find('.ui.calendar').calendar({type: 'datetime'});
        dlg.find('form').on('submit', function(e) {
            e.preventDefault();
            dlg.find('div.green.button').click();
        });
        return dlg;
    },
    readMessages: function() {
        const self = this;
        if (!self.readmsgdlg) {
            self.readmsgdlg = self.createPickMessageTypeDialog('read-msg-dlg', '${_('Read Messages')}',
                '${_('Select message type to read:')}', function(msg) {
                    $.post('${route('Gw', {name: 'task', op: 'readmsg'})}', {type: msg})
                        .done(function(json) {
                            self.notifyResult(json);
                        });
                }
            );
        }
        $.ntdlg.show(self.readmsgdlg);
    },
    resendMessages: function() {
        const self = this;
        if (!self.resendmsgdlg) {
            self.resendmsgdlg = self.createPickTimeDialog('resend-msg-dlg', '${_('Resend Incoming Messages')}',
                '${_('Resend incoming messages since:')}', function(since) {
                    $.post('${route('Gw', {name: 'task', op: 'resendmsg'})}', {since: since.valueOf()})
                        .done(function(json) {
                            self.notifyResult(json);
                        });
                }
            );
        }
        $.ntdlg.show(self.resendmsgdlg);
    },
    checkReport: function() {
        const self = this;
        if (!self.checkrptdlg) {
            self.checkrptdlg = self.createPickTimeDialog('check-rpt-dlg', '${_('Check report')}',
                '${_('Check for message report since:')}', function(since) {
                    $.post('${route('Gw', {name: 'task', op: 'report'})}', {since: since.valueOf()})
                        .done(function(json) {
                            self.notifyResult(json);
                        });
                }
            );
        }
        $.ntdlg.show(self.checkrptdlg);
    },
    init: function() {
        const self = this;
        $('.menu-about').on('click', function(e) {
            e.preventDefault();
            self.about();
        });
        $('.menu-readmsg').on('click', function(e) {
            e.preventDefault();
            self.readMessages();
        });
        $('.menu-resendmsg').on('click', function(e) {
            e.preventDefault();
            self.resendMessages();
        });
        $('.menu-checkreport').on('click', function(e) {
            e.preventDefault();
            self.checkReport();
        });
    }
}
`).addLast(`
$.tasks.init();
`) -%>